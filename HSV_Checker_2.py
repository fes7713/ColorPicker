# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'HSV_Checker_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QModelIndex
from PyQt5.QtGui import QColor, QIcon
from KClass.Spline_Interpolation_2 import Color_Interpolation


class _Bar(QtWidgets.QWidget):
    clickedValue = QtCore.pyqtSignal(str)

    def __init__(self, colors=None, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self._bar_solid_percent = 0.8
        self._background_color = QtGui.QColor('grey')
        self._padding = 4.0  # n-pixel gap around edge.
        self.nSteps = None
        self.padding = 5
        self.colors = []
        if not colors:
            return

        self.nSteps = len(colors)

    def paintEvent(self, e):
        painter = QtGui.QPainter(self)
        brush = QtGui.QBrush()
        brush.setColor(self._background_color)
        brush.setStyle(Qt.SolidPattern)
        rect = QtCore.QRect(0, 0, painter.device().width(), painter.device().height())
        painter.fillRect(rect, brush)
        if self.colors:
            width = self.size().width()
            height = self.size().height()
            d_width = width - self.padding * 2
            d_height = height - self.padding * 2

            step_size = d_width / self.nSteps

            for i in range(self.nSteps):
                brush.setColor(QColor(self.colors[i]))
                rect = QtCore.QRect(self.padding + step_size * i - 1,
                                    self.padding,
                                    step_size + 1,
                                    d_height)
                painter.fillRect(rect, brush)
        painter.end()

    def _trigger_refresh(self):
        self.update()

    def setColors(self, colors):
        self.nSteps = len(colors)
        self.colors = colors
        self.update()

    def setBarSolidPercent(self, f):
        self._bar_solid_percent = float(f)
        self.update()

    def setBackgroundColor(self, color):
        self._background_color = QtGui.QColor(color)
        self.update()

    def setNotchesVisible(self, b):
        return self._dial.setNotchesVisible(b)

    def mouseMoveEvent(self, e):
        if not self.colors:
            return
        d_width = self.size().width() - (self._padding * 2)
        click_x = e.x()
        pc = (click_x - self.padding) / d_width
        index = int(self.nSteps * pc)
        if index >= self.nSteps:
            index = self.nSteps - 1
        # if index < 0:
        #     index = 0

        color = self.colors[index]
        self.clickedValue.emit(color)

    def mousePressEvent(self, e):
        if not self.colors:
            return
        d_width = self.size().width() - (self._padding * 2)
        click_x = e.x()
        pc = (click_x - self.padding) / d_width
        index = int(self.nSteps * pc)
        if index >= self.nSteps:
            index = self.nSteps - 1
        # if index < 0:
        #     index = 0

        color = self.colors[index]
        self.clickedValue.emit(color)


class Ui_Form(QtWidgets.QWidget):
    def __init__(self, Form):
        super().__init__()
        Form.setObjectName("Form")
        Form.resize(829, 574)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.colorDisplay = QtWidgets.QWidget(Form)
        self.colorDisplay.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.colorDisplay.sizePolicy().hasHeightForWidth())
        ############
        self.colorDisplay = _Bar()
        self.colorDisplay.setSizePolicy(sizePolicy)
        self.colorDisplay.setObjectName("colorDisplay")
        self.colorDisplay.setBarSolidPercent(0.9)
        self.colorDisplay.setBackgroundColor('gray')
        ############
        self.horizontalLayout_2.addWidget(self.colorDisplay)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_2.addLayout(self.verticalLayout_4)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.hueLabel = QtWidgets.QLabel(Form)
        self.hueLabel.setObjectName("hueLabel")
        self.horizontalLayout_3.addWidget(self.hueLabel)
        self.hueValue = QtWidgets.QLabel(Form)
        self.hueValue.setObjectName("hueValue")
        self.horizontalLayout_3.addWidget(self.hueValue)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.hueSlider = QtWidgets.QSlider(Form)
        self.hueSlider.setMaximum(360)
        self.hueSlider.setOrientation(QtCore.Qt.Horizontal)
        self.hueSlider.setObjectName("hueSlider")
        self.verticalLayout_2.addWidget(self.hueSlider)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.satLabel = QtWidgets.QLabel(Form)
        self.satLabel.setObjectName("satLabel")
        self.horizontalLayout_4.addWidget(self.satLabel)
        self.satValue = QtWidgets.QLabel(Form)
        self.satValue.setObjectName("satValue")
        self.horizontalLayout_4.addWidget(self.satValue)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)
        self.satSlider = QtWidgets.QSlider(Form)
        self.satSlider.setMaximum(255)
        self.satSlider.setProperty("value", 255)
        self.satSlider.setOrientation(QtCore.Qt.Horizontal)
        self.satSlider.setObjectName("satSlider")
        self.verticalLayout_2.addWidget(self.satSlider)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.valueValue = QtWidgets.QLabel(Form)
        self.valueValue.setObjectName("valueValue")
        self.horizontalLayout_5.addWidget(self.valueValue)
        self.valueLabel = QtWidgets.QLabel(Form)
        self.valueLabel.setObjectName("valueLabel")
        self.horizontalLayout_5.addWidget(self.valueLabel)
        self.verticalLayout_2.addLayout(self.horizontalLayout_5)
        self.valueSlider = QtWidgets.QSlider(Form)
        self.valueSlider.setMaximum(255)
        self.valueSlider.setProperty("value", 255)
        self.valueSlider.setOrientation(QtCore.Qt.Horizontal)
        self.valueSlider.setObjectName("valueSlider")
        self.verticalLayout_2.addWidget(self.valueSlider)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.nStepsLabel = QtWidgets.QLabel(Form)
        self.nStepsLabel.setObjectName("nStepsLabel")
        self.horizontalLayout.addWidget(self.nStepsLabel)
        self.nStepsValue = QtWidgets.QLabel(Form)
        self.nStepsValue.setObjectName("nStepsValue")
        self.horizontalLayout.addWidget(self.nStepsValue)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.nStepsSlider = QtWidgets.QSlider(Form)
        self.nStepsSlider.setMinimum(1)
        self.nStepsSlider.setMaximum(100)
        self.nStepsSlider.setOrientation(QtCore.Qt.Horizontal)
        self.nStepsSlider.setObjectName("nStepsSlider")
        self.verticalLayout_2.addWidget(self.nStepsSlider)
        self.subColorDisplay = QtWidgets.QWidget(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.subColorDisplay.sizePolicy().hasHeightForWidth())

        ############
        self.subColorDisplay = _Bar()
        self.subColorDisplay.setBarSolidPercent(0.9)
        self.subColorDisplay.setBackgroundColor('gray')
        self.subColorDisplay.setSizePolicy(sizePolicy)
        self.subColorDisplay.setMinimumSize(QtCore.QSize(100, 100))
        self.subColorDisplay.setObjectName("subColorDisplay")
        ############
        self.verticalLayout_2.addWidget(self.subColorDisplay)
        self.rgbListView = QtWidgets.QTreeView(Form)
        self.rgbListView.setAlternatingRowColors(True)
        self.rgbListView.setObjectName("rgbListView")
        self.verticalLayout_2.addWidget(self.rgbListView)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.rgbAddButton = QtWidgets.QPushButton(Form)
        self.rgbAddButton.setObjectName("rgbAddButton")
        self.horizontalLayout_6.addWidget(self.rgbAddButton)
        self.rgbRemoveButton = QtWidgets.QPushButton(Form)
        self.rgbRemoveButton.setObjectName("rgbRemoveButton")
        self.horizontalLayout_6.addWidget(self.rgbRemoveButton)
        self.verticalLayout_2.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.retranslateUi(Form)

        ###################################################################
        self.nStepsSlider.setMaximum(200)
        self.hueSlider.valueChanged['int'].connect(self.hueValue.setNum)
        self.satSlider.valueChanged['int'].connect(self.satValue.setNum)
        self.nStepsSlider.valueChanged['int'].connect(self.nStepsValue.setNum)
        self.valueSlider.valueChanged['int'].connect(self.valueLabel.setNum)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.color = QColor()
        self.color.setHsv(0, 255, 255)
        self.colorDisplay.setColors([self.color.name()])
        self.subColorDisplay.setBackgroundColor(self.color)

        self.hueSlider.valueChanged['int'].connect(self.colorChanged)
        self.satSlider.valueChanged['int'].connect(self.colorChanged)
        self.valueSlider.valueChanged['int'].connect(self.colorChanged)
        self.nStepsSlider.valueChanged['int'].connect(self.stepChanged)
        self.nSteps = self.nStepsSlider.value()

        # Model作成
        self.rgbSelectedIndex = None

        self.model = QtGui.QStandardItemModel()
        self.model_item = QtGui.QStandardItem(self.color.name())
        self.rgbListView.setModel(self.model)

        # Set pixel map
        self.brush = QtGui.QPixmap(50, 50)
        self.brush.fill(self.color)
        self.model_item.setIcon(QIcon(self.brush))
        self.model.appendRow(self.model_item)

        # Signal-Slot作成
        self.rgbAddButton.clicked.connect(self.addList)
        self.rgbListView.clicked.connect(self.listClicked)
        self.rgbRemoveButton.clicked.connect(self.removeList)
        self.model.itemChanged.connect(self.itemChanged)
        self.colorDisplay.clickedValue.connect(self.color_picker)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.hueLabel.setText(_translate("Form", "Hue"))
        self.hueValue.setText(_translate("Form", "0"))
        self.satLabel.setText(_translate("Form", "Saturation"))
        self.satValue.setText(_translate("Form", "255"))
        self.valueValue.setText(_translate("Form", "Value"))
        self.valueLabel.setText(_translate("Form", "255"))
        self.nStepsLabel.setText(_translate("Form", "Number of Steps"))
        self.nStepsValue.setText(_translate("Form", "1"))
        self.rgbAddButton.setText(_translate("Form", "Add"))
        self.rgbRemoveButton.setText(_translate("Form", "Remove"))

    def colorChanged(self):
        self.color.setHsv(self.hueSlider.value(), self.satSlider.value(), self.valueSlider.value())
        # self.colorDisplay.setBackgroundColor(self.color)
        self.subColorDisplay.setBackgroundColor(self.color)
        print(self.itemsData())

    def listClicked(self, index):
        self.rgbSelectedIndex = index.row()
        data = index.data()
        self.hueSlider.setValue(QColor(data).hue())
        self.satSlider.setValue(QColor(data).saturation())
        self.valueSlider.setValue(QColor(data).value())

    def addList(self):
        txt = self.color.name()
        self.model_item = QtGui.QStandardItem(txt)
        self.brush.fill(self.color)
        self.model_item.setIcon(QIcon(self.brush))
        self.model.appendRow(self.model_item)
        self.rgbListView.scrollToBottom()

        self.display_color_update()

    def removeList(self):
        if self.rgbSelectedIndex is not None:
            self.model.removeRow(self.rgbSelectedIndex)
            self.display_color_update()
        if self.rgbSelectedIndex:
            self.rgbSelectedIndex -= 1
            return

    def changeItemIcon(self, row, column, color):
        item = self.model.itemFromIndex(self.model.index(row, column))
        self.brush.fill(color)
        item.setIcon(QIcon(self.brush))

    def itemChanged(self, item):
        color = item.index().data()
        self.brush.fill(QColor(color))
        self.listClicked(item.index())
        self.display_color_update()
        self.model.itemChanged.disconnect()
        item.setIcon(QIcon(self.brush))
        self.model.itemChanged.connect(self.itemChanged)

    def itemsData(self):
        index = 0
        data = []
        item = self.model.index(index, 0).data()
        while item:
            data.append(item)
            index += 1
            item = self.model.index(index, 0).data()
        return data

    def stepChanged(self):
        self.nSteps = self.nStepsSlider.value()
        self.display_color_update()

    def display_color_update(self):
        items = self.itemsData()
        self.colorDisplay.setColors(items)
        if len(items) > self.nSteps or len(items) < 2:
            return
        colors = Color_Interpolation(items, self.nStepsSlider.value())
        self.colorDisplay.setColors(colors)

    def color_picker(self, value):
        self.color = QColor(value)
        self.hueSlider.setValue(QColor(self.color).hue())
        self.satSlider.setValue(QColor(self.color).saturation())
        self.valueSlider.setValue(QColor(self.color).value())
        self.subColorDisplay.setBackgroundColor(self.color)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form(Form)
    Form.show()
    sys.exit(app.exec_())
