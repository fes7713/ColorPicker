# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'HSV_Checker.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt

class _Bar(QtWidgets.QWidget):
    clickedValue = QtCore.pyqtSignal(int)
    def __init__(self, steps, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.setSizePolicy(
            QtWidgets.QSizePolicy.MinimumExpanding,
            QtWidgets.QSizePolicy.MinimumExpanding
        )

        if isinstance(steps, list):
            # list of colours.
            self.n_steps = len(steps)
            self.steps = steps

        elif isinstance(steps, int):
            # int number of bars, defaults to red.
            self.n_steps = steps
            self.steps = ['red'] * steps

        else:
            raise TypeError('steps must be a list or int')

        self._bar_solid_percent = 0.8
        self._background_color = QtGui.QColor('black')
        self._padding = 4.0  # n-pixel gap around edge.
        self.value = 50


    def sizeHint(self):
        return QtCore.QSize(180, 80)

    def paintEvent(self, e):
        painter = QtGui.QPainter(self)
        brush = QtGui.QBrush()
        brush.setColor(self._background_color)
        brush.setStyle(Qt.SolidPattern)
        print(painter.device().width())
        rect = QtCore.QRect(0, 0, painter.device().width(), painter.device().height())
        painter.fillRect(rect, brush)

        # Define our canvas.
        d_height = painter.device().height() - (self._padding * 2)
        d_width = painter.device().width() - (self._padding * 2)

        step_size = d_width / self.n_steps
        bar_width = step_size * self._bar_solid_percent
        bar_spacer = step_size * (1-self._bar_solid_percent)/2

        pc = self.value/100
        n_steps_to_draw = int(pc * self.n_steps)+1
        for n in range(n_steps_to_draw):
            if isinstance(self.steps[n], list):
                brush.setColor(QtGui.QColor(*self.steps[n]))
            else:
                brush.setColor(QtGui.QColor(self.steps[n]))
            rect = QtCore.QRect(
                self._padding + (n * step_size) + bar_spacer,
                self._padding,
                bar_width,
                d_height
            )
            painter.fillRect(rect, brush)
        painter.end()

    def _trigger_refresh(self):
        self.update()

    def _calculate_clicked_value(self, e):
        d_width = self.size().width() - (self._padding * 2)
        click_x = e.x()
        value = click_x / d_width * 99
        if value > 99.99:
            value = 99.99
        self.setValue(value)


    def mouseMoveEvent(self, e):
        self._calculate_clicked_value(e)
        self.update()

    def mousePressEvent(self, e):
        self._calculate_clicked_value(e)
        self.update()

    def setValue(self, value):
        self.value = value
        self.update()

    def setColor(self, color):
        self.steps = [color] * self._bar.n_steps
        self.update()

    def setColors(self, colors):
        self.n_steps = len(colors)
        self.steps = colors
        self.update()

    def setColors_gradation(self, startRgbList, endRgbList, nSteps):
        self.n_steps = nSteps
        colors = []
        dRgb = [endRgbList[0] - startRgbList[0], endRgbList[1] - startRgbList[1], endRgbList[2] - startRgbList[2]]
        for i in range(nSteps):
            colors.append([startRgbList[0] + dRgb[0]/nSteps*i, startRgbList[1] + dRgb[1]/nSteps*i, startRgbList[2] + dRgb[2]/nSteps*i])
        self.steps = colors
        self.update()

    def setBarPadding(self, i):
        self._padding = int(i)
        self.update()

    def setBarSolidPercent(self, f):
        self._bar_solid_percent = float(f)
        self.update()

    def setBackgroundColor(self, color):
        self._background_color = QtGui.QColor(color)
        self.update()
    def setNotchesVisible(self, b):
        return self._dial.setNotchesVisible(b)

class Ui_Form(QtWidgets.QWidget):
    def __init__(self, Form):
        super().__init__()
        Form.setObjectName("Form")
        Form.resize(400, 300)
        self.hueSlider = QtWidgets.QSlider(Form)
        self.hueSlider.setGeometry(QtCore.QRect(200, 40, 160, 22))
        self.hueSlider.setMaximum(360)
        self.hueSlider.setOrientation(QtCore.Qt.Horizontal)
        self.hueSlider.setObjectName("hueSlider")
        self.satSlider = QtWidgets.QSlider(Form)
        self.satSlider.setGeometry(QtCore.QRect(200, 100, 160, 22))
        self.satSlider.setMaximum(255)
        self.satSlider.setOrientation(QtCore.Qt.Horizontal)
        self.satSlider.setObjectName("satSlider")
        self.valueSlider = QtWidgets.QSlider(Form)
        self.valueSlider.setGeometry(QtCore.QRect(200, 160, 160, 22))
        self.valueSlider.setMaximum(255)
        self.valueSlider.setOrientation(QtCore.Qt.Horizontal)
        self.valueSlider.setObjectName("valueSlider")
        self.colorDisplay = _Bar(["#5e4fa2", "#3288bd", "#66c2a5", "#abdda4", "#e6f598", "#ffffbf", "#fee08b", "#fdae61", "#f46d43", "#d53e4f", "#9e0142"])
        self.colorDisplay.setBackgroundColor('gray')
        self.colorDisplay.setBarPadding(2)
        self.colorDisplay.setBarSolidPercent(0.9)
        self.colorDisplay.setColors_gradation([255, 80, 80], [51, 204, 204], 5)
        self.colorDisplay.setGeometry(QtCore.QRect(30, 40, 120, 141))
        self.colorDisplay.setObjectName("colorDisplay")
        self.hueLabel = QtWidgets.QLabel(Form)
        self.hueLabel.setGeometry(QtCore.QRect(190, 10, 62, 15))
        self.hueLabel.setObjectName("hueLabel")
        self.satLabel = QtWidgets.QLabel(Form)
        self.satLabel.setGeometry(QtCore.QRect(190, 80, 81, 16))
        self.satLabel.setObjectName("satLabel")
        self.valueLabel = QtWidgets.QLabel(Form)
        self.valueLabel.setGeometry(QtCore.QRect(190, 140, 62, 15))
        self.valueLabel.setObjectName("valueLabel")
        self.rgbEntry = QtWidgets.QLineEdit(Form)
        self.rgbEntry.setGeometry(QtCore.QRect(200, 210, 121, 21))
        self.rgbEntry.setObjectName("rgbEntry")
        self.hueValue = QtWidgets.QLabel(Form)
        self.hueValue.setGeometry(QtCore.QRect(290, 10, 62, 15))
        self.hueValue.setObjectName("hueValue")
        self.satValue = QtWidgets.QLabel(Form)
        self.satValue.setGeometry(QtCore.QRect(290, 80, 62, 15))
        self.satValue.setObjectName("satValue")
        self.valueValue = QtWidgets.QLabel(Form)
        self.valueValue.setGeometry(QtCore.QRect(290, 140, 62, 15))
        self.valueValue.setObjectName("valueValue")

        self.retranslateUi(Form)
        self.hueSlider.valueChanged['int'].connect(self.hueValue.setNum)
        self.satSlider.valueChanged['int'].connect(self.satValue.setNum)
        self.valueSlider.valueChanged['int'].connect(self.valueValue.setNum)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.hueLabel.setText(_translate("Form", "Hue"))
        self.satLabel.setText(_translate("Form", "Saturation"))
        self.valueLabel.setText(_translate("Form", "Value"))
        self.hueValue.setText(_translate("Form", "0"))
        self.satValue.setText(_translate("Form", "0"))
        self.valueValue.setText(_translate("Form", "0"))

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form(Form)
    Form.show()
    sys.exit(app.exec_())
